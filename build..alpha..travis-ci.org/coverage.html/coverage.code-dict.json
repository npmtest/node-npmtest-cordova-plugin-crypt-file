{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-crypt-file/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_crypt_file */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-crypt-file/lib.npmtest_cordova_plugin_crypt_file.js":"/* istanbul instrument in package npmtest_cordova_plugin_crypt_file */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_crypt_file = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_crypt_file = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-crypt-file/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-crypt-file && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_crypt_file */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_crypt_file\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_crypt_file.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_crypt_file.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_crypt_file.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_crypt_file.__dirname + '/lib.npmtest_cordova_plugin_crypt_file.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-crypt-file/node_modules/cordova-plugin-crypt-file/hooks/after_prepare.js":"module.exports = function(context) {\n\n    var path              = context.requireCordovaModule('path'),\n        fs                = context.requireCordovaModule('fs'),\n        crypto            = context.requireCordovaModule('crypto'),\n        Q                 = context.requireCordovaModule('q'),\n        cordova_util      = context.requireCordovaModule('cordova-lib/src/cordova/util'),\n        platforms         = context.requireCordovaModule('cordova-lib/src/platforms/platforms'),\n        Parser            = context.requireCordovaModule('cordova-lib/src/cordova/metadata/parser'),\n        ParserHelper      = context.requireCordovaModule('cordova-lib/src/cordova/metadata/parserhelper/ParserHelper'),\n        ConfigParser      = context.requireCordovaModule('cordova-common').ConfigParser;\n\n    var deferral = new Q.defer();\n    var projectRoot = cordova_util.cdProjectRoot();\n\n    var key = crypto.randomBytes(24).toString('base64');\n    var iv = crypto.randomBytes(12).toString('base64');\n\n    console.log('key=' + key + ', iv=' + iv)\n\n    var targetFiles = loadCryptFileTargets();\n\n    context.opts.platforms.filter(function(platform) {\n        var pluginInfo = context.opts.plugin.pluginInfo;\n        return pluginInfo.getPlatformsArray().indexOf(platform) > -1;\n        \n    }).forEach(function(platform) {\n        var platformPath = path.join(projectRoot, 'platforms', platform);\n        var platformApi = platforms.getPlatformApi(platform, platformPath);\n        var platformInfo = platformApi.getPlatformInfo();\n        var wwwDir = platformInfo.locations.www;\n\n        findCryptFiles(wwwDir).filter(function(file) {\n            return isCryptFile(file.replace(wwwDir, ''));\n        }).forEach(function(file) {\n            var content = fs.readFileSync(file, 'utf-8');\n            fs.writeFileSync(file, encryptData(content, key, iv), 'utf-8');\n            console.log('encrypt: ' + file);\n        });\n\n        if (platform == 'ios') {\n            var ios_parser = context.requireCordovaModule('cordova-lib/src/cordova/metadata/ios_parser');\n            var iosParser = new ios_parser(platformPath);\n            var pluginDir = path.join(iosParser.cordovaproj, 'Plugins', context.opts.plugin.id);\n            replaceCryptKey_ios(pluginDir, key, iv);\n\n        } else if (platform == 'android') {\n            var pluginDir = path.join(platformPath, 'src');\n            replaceCryptKey_android(pluginDir, key, iv);\n\n            var cfg = new ConfigParser(platformInfo.projectConfig.path);\n            cfg.doc.getroot().getchildren().filter(function(child, idx, arr) {\n                return (child.tag == 'content');\n            }).forEach(function(child) {\n                child.attrib.src = '/+++/' + child.attrib.src;\n            });\n\n            cfg.write();\n        }\n    });\n\n    deferral.resolve();\n    return deferral.promise;\n\n\n    function findCryptFiles(dir) {\n        var fileList = [];\n        var list = fs.readdirSync(dir);\n        list.forEach(function(file) {\n            fileList.push(path.join(dir, file));\n        });\n        // sub dir\n        list.filter(function(file) {\n            return fs.statSync(path.join(dir, file)).isDirectory();\n        }).forEach(function(file) {\n            var subDir = path.join(dir, file)\n            var subFileList = findCryptFiles(subDir);\n            fileList = fileList.concat(subFileList);\n        });\n\n        return fileList;\n    }\n\n    function loadCryptFileTargets() {\n        var xmlHelpers = context.requireCordovaModule('cordova-common').xmlHelpers;\n\n        var pluginXml = path.join(context.opts.plugin.dir, 'plugin.xml');\n\n        var include = [];\n        var exclude = [];\n\n        var doc = xmlHelpers.parseElementtreeSync(pluginXml);\n        var cryptfiles = doc.findall('cryptfiles');\n        if (cryptfiles.length > 0) {\n            cryptfiles[0]._children.forEach(function(elm) {\n                elm._children.filter(function(celm) {\n                    return celm.tag == 'file' && celm.attrib.regex && celm.attrib.regex.trim().length > 0;\n                }).forEach(function(celm) {\n                    if (elm.tag == 'include') {\n                        include.push(celm.attrib.regex.trim());\n                    } else if (elm.tag == 'exclude') {\n                        exclude.push(celm.attrib.regex.trim());\n                    }\n                });\n            })\n        }\n\n        return {'include': include, 'exclude': exclude};\n    }\n\n    function isCryptFile(file) {\n        if (!targetFiles.include.some(function(regexStr) { return new RegExp(regexStr).test(file); })) {\n            return false;\n        }\n        if (targetFiles.exclude.some(function(regexStr) { return new RegExp(regexStr).test(file); })) {\n            return false;\n        }\n        return true;\n    }\n\n    function encryptData(input, key, iv) {\n        var cipher = crypto.createCipheriv('aes-256-cbc', key, iv);\n        var encrypted = cipher.update(input, 'utf8', 'base64') + cipher.final('base64');\n\n        return encrypted;\n    }\n\n    function replaceCryptKey_ios(pluginDir, key, iv) {\n        var sourceFile = path.join(pluginDir, 'CDVCryptURLProtocol.m');\n        var content = fs.readFileSync(sourceFile, 'utf-8');\n\n        var includeArrStr = targetFiles.include.map(function(pattern) { return '@\"' + pattern.replace('\\\\', '\\\\\\\\') + '\"'; }).join(', ');\n        var excludeArrStr = targetFiles.exclude.map(function(pattern) { return '@\"' + pattern.replace('\\\\', '\\\\\\\\') + '\"'; }).join(', ');\n\n        content = content.replace(/kCryptKey = @\".*\";/, 'kCryptKey = @\"' + key + '\";')\n                         .replace(/kCryptIv = @\".*\";/, 'kCryptIv = @\"' + iv + '\";')\n                         .replace(/kIncludeFiles\\[\\] = {.*};/, 'kIncludeFiles\\[\\] = { ' + includeArrStr + ' };')\n                         .replace(/kExcludeFiles\\[\\] = {.*};/, 'kExcludeFiles\\[\\] = { ' + excludeArrStr + ' };')\n                         .replace(/kIncludeFileLength = [0-9]+;/, 'kIncludeFileLength = ' + targetFiles.include.length + ';')\n                         .replace(/kExcludeFileLength = [0-9]+;/, 'kExcludeFileLength = ' + targetFiles.exclude.length + ';');\n\n        fs.writeFileSync(sourceFile, content, 'utf-8');\n    }\n\n    function replaceCryptKey_android(pluginDir, key, iv) {\n        var sourceFile = path.join(pluginDir, 'com/tkyaji/cordova/DecryptResource.java');\n        var content = fs.readFileSync(sourceFile, 'utf-8');\n\n        var includeArrStr = targetFiles.include.map(function(pattern) { return '\"' + pattern.replace('\\\\', '\\\\\\\\') + '\"'; }).join(', ');\n        var excludeArrStr = targetFiles.exclude.map(function(pattern) { return '\"' + pattern.replace('\\\\', '\\\\\\\\') + '\"'; }).join(', ');\n\n        content = content.replace(/CRYPT_KEY = \".*\";/, 'CRYPT_KEY = \"' + key + '\";')\n                         .replace(/CRYPT_IV = \".*\";/, 'CRYPT_IV = \"' + iv + '\";')\n                         .replace(/INCLUDE_FILES = new String\\[\\] {.*};/, 'INCLUDE_FILES = new String[] { ' + includeArrStr + ' };')\n                         .replace(/EXCLUDE_FILES = new String\\[\\] {.*};/, 'EXCLUDE_FILES = new String[] { ' + excludeArrStr + ' };');\n\n        fs.writeFileSync(sourceFile, content, 'utf-8');\n    }\n}\n"}